<pre class='metadata'>
Title: Web OTP API
Shortname: webotp
Level: 1
Status: DREAM
ED: http://samuelgoto.github.io/WebOTP
Repository: samuelgoto/WebOTP
Editor: Sam Goto, Google Inc. https://google.com, goto@google.com
Favicon: logo-cookies.png
Markup Shorthands: markdown yes, css no, biblio yes
Abstract: A Javascript API to request one time passwords for verifying credentials (e.g. phone numbers, emails).
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/sms
</pre>

<pre class=anchors>
spec: ecma262; urlPrefix: https://tc39.github.io/ecma262/
    type: dfn
        text: time values; url: sec-time-values-and-time-range
        text: promise; url: sec-promise-objects
</pre>

<pre class=link-defaults>
spec:infra; type:dfn; text:list
spec:html; type:dfn; for:environment settings object; text:global object
spec:webidl; type:dfn; text:resolve
</pre>

<style>
dl.domintro dt {
    font-family: Menlo, Consolas, "DejaVu Sans Mono", Monaco, monospace;

    padding-top: 0.5em;
    padding-bottom: 1em;
}
dl.domintro dt a {
    color: inherit; border-bottom-style: none;
}
dl.domintro dt code {
    font-size: inherit;
}
</style>

<!-- ============================================================ -->
# Introduction # {#intro}
<!-- ============================================================ -->

*This section is non-normative.*

Many web sites need to verify credentials (e.g. phone numbers and email addresses) as part of their authentication flows. They currently rely on sending one-time-passwords to these communication channels to be used as proof of ownership. The one-time-password is manually handed back by the user (typically by copying/pasting) to the web app which is onerous and erroneous.

This a documentation of a client side javascript API that enables web sites to request OTPs and a set of transport-specific conventions (we start with SMS while leaving the door open to others) that can be used to connet with browsers.

Here is what the client side API looks like.

<div class=example>
```js
if (window.OTPCredential) {
  alert("feature not available :(");
  return;
}
try {
  let {otp} = await navigator.credentials.get({otp: ["sms"]});
  alert("otp received! " + otp);
} catch (e) {
  alert("timed out!");
}
```
</div>

A server side formatting convention that enables browsers to route SMSes to them is provided too, and we make an effort to enable other methods of delivery to be defined in the future (e.g. email, pluggable devices, etc).

And here is the server side formatting convention for SMS messages look like:

<div class=example>
```
Your verification code is: 123ABC78

@example.com #123ABC78
```
</div>

<!-- ============================================================ -->
## Aborting requests ## {#intro-abort}
<!-- ============================================================ -->

<div class=example>
Fetching an OTP:

```js
let signal = new AbortController();
setTimeout(() => {
  // abort after two minutes
  signal.abort();
}, 2 * 60 * 1000);
  
try {
  let {content} = await navigator.credentials.get({otp: true, abort: signal});
} catch (e) {
  // deal with errors
}
```
</div>

<!-- ============================================================ -->
## Web Components ## {#intro-wc}
<!-- ============================================================ -->

Here is an example of how to annotate an input field declaratively to receive an OTP:

<div class=example>
Web Component Polyfills

```html
<form>
  <input is="one-time-code" required />
  <input type="submit" />
</form>
```
</div>

And here is an example of how a framework could implement it using web components:

<div class=example>
Web Component Polyfills

```js
customElements.define("one-time-code",
  class extends HTMLInputElement {
    connectedCallback() {
      this.receive();
    }
    async receive() {
      try {
        let {otp} = await navigator.credentials.get({otp: true});
        this.value = otp;
        this.form.submit();
      } catch (e) {
        console.log(e);
      }
    }
  }, {
    extends: "input"
});
```
</div>

<!-- ============================================================ -->
# Transports # {#transports}
<!-- ============================================================ -->

We expect a variety of different transport mechanisms to enable OTPs
to be received, most notably via SMS, email and hardware devices.

Each of these transport mechanisms will need their own conventions on
how to provide OTPs to the browser.

In this draft, we document how SMS OTPs can be delivered to browsers.

<!-- ============================================================ -->
## SMS ## {#transports-sms}
<!-- ============================================================ -->

One of the most commonly used transport mechanisms for OTP is via
SMS messages, allowing developers to verify phone numbers. They
are typically sent embedded in an SMS message, which gets copied and
pasted by users.

What follows is a definition of a machine-readable formatting convention
that servers can use to send SMS messages that browsers can intercept
and route securely to the right origin.

Here is an example of such convention:

<div class=example>
```
Your verification code is: 123ABC78

@example.com #123ABC78
```
</div>


<!-- ============================================================ -->
# Concepts # {#concepts}
<!-- ============================================================ -->

<!-- ============================================================ -->
## OTPCredential ## {#otp-concept}
<!-- ============================================================ -->

<!-- ============================================================ -->
# The {{OTPCredential}} Interface # {#OTPCredential}
<!-- ============================================================ -->

<xmp class=idl>
[Exposed=(ServiceWorker,Window),
 SecureContext]
interface OTPCredential : EventTarget {
};
</xmp>

<!-- ============================================================ -->
# Global Interfaces # {#globals}
<!-- ============================================================ -->

<!-- ============================================================ -->
# Security # {#security}
<!-- ============================================================ -->

<!-- ====================================================================== -->
# Acknowledgements # {#acknowledgements}
<!-- ====================================================================== -->

Many thanks to
Steven Soneff,
Ayu Ishii,
Reilly Grant,
Eiji Kitamura,
Alex Russell,
Joshua Bell,
Ricky Mondello and
Mike West
for helping craft this proposal.

Special thanks to Tab Atkins, Jr. for creating and maintaining
[Bikeshed](https://github.com/tabatkins/bikeshed), the specification
authoring tool used to create this document, and for his general
authoring advice.